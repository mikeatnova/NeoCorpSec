@using System.Text.RegularExpressions;
@model NeoCorpSec.Models.CameraManagment.Camera

@{
    var locationMap = ViewBag.LocationMap as Dictionary<int, NeoCorpSec.Models.CameraManagment.Location>;
}


<!-- Camera Object -->
<details class="camera-object-details camera-object">
    <summary class="notes-summery">
        <!-- Status, Camera Name, Location Row -->
        <div class="camera-row">
            <!-- Status block-->
            <div class="camera-item status">
                @if (Model.CurrentStatus == "default")
                {
                    @:-
                }
                else
                {
                    <img class="status-image" src="@("/images/" + GetImageNameForStatus(Model.CurrentStatus))" alt="Status" id="status-img-@Model.ID">
                }
                <div class="dropdown" id="custom-dropdown-@Model.ID">
                    <button class="dropbtn" id="dropbtn-@Model.ID">▼</button>
                    <div class="dropdown-content" id="dropdown-content-@Model.ID">
                        @foreach (var status in new string[] { "Up", "Issues", "Down", "Decommissioned", "Unboxed" })
                        {
                            <form method="post" asp-controller="Home" asp-action="PutCamera">
                                <input type="hidden" name="ID" value="@Model.ID" />
                                <input type="hidden" name="Name" value="@Model.Name" />
                                <input type="hidden" name="LocationId" value="@Model.LocationId" />
                                <input type="hidden" name="Notes" value="@Model.NoteId" />
                                <input type="hidden" name="CreatedAt" value="@Model.CreatedAt" />
                                <input type="hidden" name="CurrentStatus" value="@status" />
                                <input type="submit" value="@status" />
                            </form>
                        }
                    </div>
                </div>
            </div>
            <div class="camera-item non-status-block">
                <!-- Camera Name block -->
                <div class="name">
                    @Model.Name
                </div>

                <!-- Camera Location block -->
                <div class="location">
                    @{
                        if (locationMap.ContainsKey(Model.LocationId))
                        {
                            var location = locationMap[Model.LocationId];
                            @:@location.Name, @location.City, @location.State
                        }
                        else
                        {
                            @:Unknown Location
                        }
                    }
                </div>

                <!-- Last Modified block-->
                <div class="last-modified">
                    @{
                        if (Model.ModifiedAt.HasValue)
                        {
                            string modifiedAtUTC = Model.ModifiedAt.Value.ToString("O"); // Round-trip format
                            string modifiedAtEastern = ConvertToEasternTime(modifiedAtUTC);
                            string formattedModifiedAt = ConvertNotesTimeToEastern("Last Modified: (" + modifiedAtUTC + ")");
                            @: @formattedModifiedAt
                        }
                        else
                        {
                            @:Last Modified: N/A
                        }
                    }
                </div>
            </div>
        </div>
    </summary>

    <!-- Notes Row -->
    <div class="notes-row">
        <div class="camera-item notes">
            <div class="notes-section">
                <div class="notes-form-section">
                    <form method="post" asp-action="UpdateNotes" asp-controller="Camera">
                        <div class="input-row">
                            <input type="hidden" name="cameraId" value="@Model.ID" />
                            <textarea class="custom-textarea" name="newNote" placeholder="Add a note..."></textarea>
                        </div>
                        <div class="submit-row">
                            <button class="action-button" type="submit">Submit Note</button>
                        </div>
                    </form>
                </div>
                <details class="past-cameras-details">
                    <summary>
                        <div class="text-center past-cameras-title arrow-container">Camera Note History</div>
                    </summary>
                    <div class="notes-list-section">
                        <p class="text-center">No notes available.</p>
                    </div>
                </details>
            </div>
        </div>
    </div>
</details>


@functions {
    public string GetImageNameForStatus(string status)
    {
        switch (status)
        {
            case "Up": return "grncircle.png";
            case "Down": return "redcircle.png";
            case "Issues": return "warntriangle.png";
            case "Decommissioned": return "greycircle.png";
            case "Unboxed": return "unboxed.png";
            default: return "-";
        }
    }

    public static string ConvertNotesTimeToEastern(string notes)
    {
        Regex regex = new Regex(@"\(([^)]+)\)");
        return regex.Replace(notes, m => "[" + ConvertToEasternTime(m.Groups[1].Value) + "]");
    }

    public static string ConvertToEasternTime(string dateTimeString)
    {
        DateTime utcDateTime;
        if (DateTime.TryParse(dateTimeString, out utcDateTime))
        {
            TimeZoneInfo easternZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
            DateTime easternTime = TimeZoneInfo.ConvertTimeFromUtc(utcDateTime, easternZone);
            return easternTime.ToString("MM.dd.yyyy hh:mm:ss tt"); // Now in AM/PM format
        }
        return dateTimeString;
    }
}